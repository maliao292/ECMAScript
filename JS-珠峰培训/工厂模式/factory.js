/*单例模式 虽然解决了分组，但是不能批量生产 */
// 工厂模式吧实现相同的代码放到一个函数中  函数的封装
// 低耦合  高内聚   减少代码 冗余代码  提高代码的利用率

// JS一门轻量级 ‘编程语言’（HTML + CSS 属于标记型语言）
/* 所有的编程语言都是面向对象开发的 =》  类的继承 封装  多态
 * 多态：当前这个类的多种形态
 * 后台语言中 多态 包含 重载和重写
 * JS中不存在重载
 *
  * */

function Person(name,age) {

    console.log(arguments)
}

var p1 = new Person();
/* 构造函数模式的目的就是为了创建一个自定义类 并且创建这个类的实例
    构造函数和工厂模式区别：
    普通函数执行：Person(name,age)
    构造函数模式执行：new Person(name,age)
    而函数的执行的返回值 p1 就是Person 这个类的一个实例

    2、在函数代码执行的时候
        相同  都形成私有作用域
        不同  构造函数在代码执行之前 不用自己手动创建对象 浏览器会默认创建对象数据类型值
        （这个对象其实就是当前类的一个实例 ）

* */

/*
* 创建一个数组
* var arr = []  \\  var  arr = new Array();
*
* */